(function() {

  // HELPERS

  function $(s) { return document.querySelectorAll(s); }
  function $$(id) { return document.getElementById(id); }
  function to_array(domCollection) {
    return Array.prototype.slice.call(domCollection);
  }

  function addListener(el, type, fn) {
    if (el === null) return;
    if (!('length' in el) || el === window) el = [el];
    var types = type.split(' ');
    if (types.length > 1) {
      for (var i=0; i<types.length; i++) {
        addListener(el, types[i], fn);
      }
    }
    else {
      for (var i=0; i<el.length; i++) {
        if ('addEventListener' in el[i]) {
          el[i].addEventListener(type, fn, false);
        }
        else if ('attachEvent' in el[i]) {
          el[i].attachEvent("on" + type, function() {
            return fn.call(el[i], window.event);
          });
        }
      }
    }
  }

  function mk_cls_reg(cls) {
    return new RegExp("(?:^| )" + cls + "(?:$| )");
  }

  function has_class(el, cls) {
    return (typeof el.className === 'string') && !!el.className.match(mk_cls_reg(cls));
  }

  function add_class(el, cls) {
    if (el === null) return;
    if (!('length' in el)) el = [el];

    var class_reg = mk_cls_reg(cls);
    for (var i=0; i<el.length; i++) {
      if (!el[i].className.match(class_reg)) {
        el[i].className += " " + cls;
      }
    }
  }

  function remove_class(el, cls) {
    var clses = cls.split(' ');
    if (!('length' in el)) el = [el];
    for (var i=0; i<clses.length; i++) {
      var cls_reg = mk_cls_reg(clses[i]);
      for (var j=0; j<el.length; j++) {
        el[j].className = el[j].className.replace(cls_reg, ' ').replace(/^ |  | $/g, '');
      }
    }
  }

  function set_attr(el, attr, val) {
    if (!el) return;
    if (!('length' in el)) el = [el];
    for (var i=0; i<el.length; i++) {
      el[i].setAttribute(attr, val);
    }
  }

  function css(el, key, val) {
    if (!('length' in el)) el = [el];
    var style_reg = new RegExp(' *' + key + ':[^;]+;?', '');
    for (var i=0; i<el.length; i++) {
      var style = el[i].getAttribute('style') || '';
      style = style.replace(style_reg, '');
      el[i].setAttribute('style', style + key + ':' + val + ';');
    }
  }

function ajax(opt) {
  var xhr = new XMLHttpRequest();
  xhr.open('GET', opt.url);
  xhr.send(null);
  xhr.onreadystatechange = function(state) {
    if (xhr.readyState === 4) {
      if (xhr.status === 200 && opt.success) {
        if (xhr.getResponseHeader("Content-Type").match(/\/json$/)) {
          opt.success(JSON.parse(xhr.responseText));
        }
        else {
          opt.success(xhr.responseText);
        }
      }
      else if (opt.failure) {
        opt.failure(xhr.responseText);
      }
    }
  }
}

  // Quick Search

  addListener($('.search-toggle'), 'click', function() {
    if (!$('.quicksearch')[0].className.match(/\bshown\b/)) {
      setTimeout(function() {
        $('.search-box')[0].focus();
      }, 100);
    }
    else if ($('.search-box')[0].value) {
      $('.header-search-form')[0].submit();
    }
  });

  var currentsearch;
  function searchbtn() {
    var button = document.createElement('button');
    button.setAttribute('type', 'submit');
    var icon = document.createElement('span');
    icon.className = 'fa fa-search';
    button.appendChild(icon);
    button.append(' Search for "' + currentsearch + '"');
    return button;
  }

  addListener($$('quicksearch-input'), 'keyup mouseup', function(e) {
    var search_term = e.target.value;
    if (currentsearch === search_term) return false;

    currentsearch = search_term;
    if (search_term.length < 2) {
      var quicksearch_output = $$('quicksearch-output');
      quicksearch_output.innerHTML = '';
      if (search_term !== '') quicksearch_output.appendChild(searchbtn());
      return false;
    }

    ajax({
      url: '/quicksearch/search/' + search_term,
      success: function(response) {
        update_results(search_term, response);
      },
      failure: function() {
        update_results(search_term, []);
      }
    });
  });

  function update_results(query, results) {
    if ($$('quicksearch-input').value == query) {
      var quicksearch_output = $$('quicksearch-output');
      quicksearch_output.innerHTML = '';
      for (var i=0; i<results.length; i++) {
        var link = document.createElement('a');
        link.setAttribute('href', '/quicksearch/go.php?term=' + encodeURIComponent(results[i][0]) + '&url=' + encodeURIComponent(results[i][1]));
        link.innerText = results[i][0].replace(/\[.*?\]/g, '');
        quicksearch_output.appendChild(link);
      }
      quicksearch_output.appendChild(searchbtn());
    }
  }

  addListener($('#quicksearch-input,.quicksearch'), 'keyup', function(e) {
    e.preventDefault && e.preventDefault()
    e.stopPropagation();
    var focusables = $('#quicksearch-input,#quicksearch-output a,#quicksearch-output button');
    var focused = $('.quicksearch :focus');
    var diff = 0;
    if (e.keyCode == 40) { diff = 1; }
    else if (e.keyCode == 38) { diff = -1; }
    if (diff !== 0) {
      var index = to_array(focusables).indexOf(focused[0]) + diff;
      focusables[(index + focusables.length) % focusables.length].focus();
    }
    return false;
  });

  // SHOW SEARCH QUERY IN SEARCH BOX

  var url = document.location.toString();
  var q_index = url.indexOf('?q=');
  if (q_index >= 0) {
    add_class($('.quicksearch'), 'shown');
    $$('quicksearch-input').value = decodeURIComponent(url.substr(q_index + 3).replace(/\+/g, '%20'));
    add_class($('.sub-nav'), 'search-box-open');
  }

  // TOGGLES

  var toggle_hash_trigger;

  function remove_focus(el) {
    if (el.length === undefined) el = [el];
    el.forEach(function(el) {
      var children = el.querySelectorAll('a, button, input, textarea, select');
      for (var i=0; i<children.length; i++) {
        children[i].setAttribute('tabindex', '-1');
      }
    });
  }

  function restore_focus(el) {
    if (el.length === undefined) el = [el];
    el.forEach(function(el) {
      var children = el.querySelectorAll('a, button, input, textarea, select');
      for (var i=0; i<children.length; i++) {
        children[i].removeAttribute('tabindex');
      }
    });
  }

  function toggle_click(e) {
    if (this.getAttribute('data-toggle-width')) {
      if (this.getAttribute('data-toggle-width') * 1 < window.innerWidth) return;
    }
    if (has_class(e.target, 'toggle-stop')) return;
    var trigger = this;
    var target = $(trigger.getAttribute('data-toggle'));
    var previous = $('.toggle[data-toggle="' + trigger.getAttribute('data-toggle') + '"]');
    var group = $(target[0].getAttribute('data-toggle-group'));
    if (!group.length) group = target;
    var hidden = $(trigger.getAttribute('data-toggle-hides'));
    var js_resize = target[0].getAttribute('data-js-resize');
    var use_hash = trigger.getAttribute('data-use-hash');
    if (has_class(target[0], 'shown')) {
      if (js_resize && js_resize !== 'false') {
        css(target[0], 'height', target[0].scrollHeight + 'px');
        setTimeout(function() { css(target[0], 'height', 0); }, 25);
        setTimeout(function() {  css(target[0], 'display', 'none'); }, 525);
        clearTimeout(target[0].getAttribute('data-resize-timeout'));
      }
      remove_class(group, 'shown');
      remove_focus(group);
      remove_class(previous, 'toggle-on')
      set_attr(previous, 'aria-expanded', false);
      set_attr(hidden, 'aria-hidden', true);
      set_attr(target, 'aria-hidden', true);
      if (use_hash && window.location.hash) {
        history.back();
        toggle_hash_trigger = null;
      }
    }
    else {
      if (js_resize && js_resize !== 'false') {
        css(target[0], 'display', 'block');
        setTimeout(function() {
          css(target[0], 'height', target[0].scrollHeight + 'px');
          set_attr(target, 'data-resize-timeout', setTimeout(function() {
            css(target[0], 'height', 'auto');
          }, 500))
        }, 25);
      }
      remove_class(group, 'shown');
      remove_focus(group);
      add_class(target, 'shown');
      restore_focus(target);
      set_attr(target, 'aria-hidden', false);
      add_class(previous, 'toggle-on')
      set_attr(previous, 'aria-expanded', true);
      set_attr(hidden, 'aria-hidden', false);
      if (use_hash)
        history.pushState({}, trigger.getAttribute('href'), trigger.getAttribute('href'));
        toggle_hash_trigger = trigger;
    }
    e.stopPropagation();
    if (e && e.preventDefault) e.preventDefault();
    return false;
  }
  addListener($('.toggle'), 'click', toggle_click);

  $('.toggle:not(.toggle-on)').forEach(function(toggle) {
    var target = $(toggle.getAttribute('data-toggle'));
    var hidden = $(toggle.getAttribute('data-toggle-hides'));
    var group = $(target[0].getAttribute('data-toggle-group'));
    if (!group.length) group = target;
    remove_class(group, 'shown');
    remove_focus(group);
    set_attr(hidden, 'aria-hidden', true);
    set_attr(target, 'aria-hidden', true);
  });

  addListener(window, 'hashchange', function(e) {
    if (toggle_hash_trigger && e.originalEvent.oldURL.indexOf(toggle_hash_trigger.attr('href')) >= 0) {
      var t = toggle_hash_trigger;
      toggle_hash_trigger = null
      toggle_click.call(t);
      e.preventDefault();
      return false;
    }
  });

  // MENU ARIA ATTRIBUTES

  addListener($('.main-nav-item'), 'mouseover', function() {
    if (window.innerWidth < 768) return;
    set_attr(this.querySelector('.nav-dropdown'), 'aria-expanded', true);
    set_attr(this.querySelector('.menu'), 'aria-hidden', false);
  });

  addListener($('.main-nav-item'), 'mouseout', function() {
    if (window.innderWidth < 768) return;
    set_attr(this.querySelector('.nav-dropdown'), 'aria-expanded', false);
    set_attr(this.querySelector('.menu'), 'aria-hidden', true);
  });

  // TABS

  function tab_click(e) {
    var trigger = this;
    var target = $(trigger.getAttribute('data-tab'));
    var group = $('.tab[data-tab-group="' + trigger.getAttribute('data-tab-group') + '"]');
    var prev_trigger, prev_target;
    for (var i=0; i<group.length; i++) {
      if (group[i].className.match(/\btab-on\b/)) {
        prev_trigger = group[i];
        prev_target = $(prev_trigger.getAttribute('data-tab'));
      }
    }

    remove_class(prev_target, 'shown');
    remove_focus(prev_target);
    set_attr(prev_target, 'aria-hidden', 'true');
    remove_class(prev_trigger, 'tab-on');
    set_attr(prev_trigger, 'aria-expanded', 'false');
    add_class(target, 'shown');
    restore_focus(target);
    set_attr(target, 'aria-hidden', false);
    add_class(trigger, 'tab-on');
    set_attr(trigger, 'aria-expanded', true);

    if (e && e.preventDefault) e.preventDefault();
    return false;
  }
  addListener($('.tab'), 'click tab', tab_click);

  var tab_on = $('.tab-on');
  if (tab_on.length) tab_click.call(tab_on[0]);

  // PAGINATION

  function infinite_scroll(parent) {
    var pagination = parent.getElementsByClassName('pagination');
    if (pagination.length > 0) {
      pagination = pagination[0];
      var waiting_for_scroll = true;
      var page_url = pagination.querySelectorAll('a[href]')[0].getAttribute('href').replace(/\/page\/\d+/, '/page');
      var page_url_pieces = page_url.split('?');
      var page = pagination.querySelectorAll('.current')[0].innerText * 1;
      var numbers = to_array(pagination.querySelectorAll('.page-numbers'));
      var max = numbers[numbers.length - 2].innerText * 1;
      addListener(window, 'scroll', function() {
        if (waiting_for_scroll) {
          var in_view = pagination.getBoundingClientRect().top < window.innerHeight;
          if (in_view) {
            waiting_for_scroll = false;
            page += 1;
            if (page <= max) {
              ajax({
                url: page_url_pieces[0] + page + '/?ajax_paged' + (page_url_pieces[1] ? '&' + page_url_pieces[1] : ''),
                success: function(body) {
                  var newContent = document.createElement('div');
                  newContent.innerHTML = body;
                  pagination.before(newContent);
                  waiting_for_scroll = true;
                  pagination.remove();
                  pagination = newContent.getElementsByClassName('pagination')[0];
                },
                error: function(body) {
                }
              })
            }
          }
        }
      });
    }
  }
  infinite_scroll(document);

  // UNDERLINE LINKS

  var links = document.querySelectorAll('.editor-content>:not(.becky-card) a, .wysiwyg-component a:link, .event-description a:link');
  for (var i=0; i<links.length; i++) {
    if (!links[i].innerText.match(/^\s*$/)) {
      if (links[i].innerHTML.match(/<img/)) continue;
      if (links[i].className.match(/btn/)) continue;
      if (links[i].className.match(/no-body-link/)) continue;
      if (links[i].className.match(/wp-block-button__link/)) continue;
      if (links[i].className) links[i].className += ' body-link';
      else links[i].className = 'body-link';
    }
  }

  var touchevent
    = 'TouchEvent' in window ? 'touchstart'
    : 'MSPointerEvent' in window ? 'MSPointerDown'
    : 'pointerdown';

  var touchables = $('.touchable')

  for (var i=0; i<touchables.length; i++) {
    addListener(touchables[i], touchevent, function(e) {
      if (window.innerWidth < 768) return;
      if (e.pointerType == 'mouse' || document.activeElement == this) {
        this.blocktouch = false;
        return;
      }

      e.preventDefault();
      this.blocktouch = true;

      remove_class($('.hover'), 'hover');
      add_class(this.parentElement, 'hover');
      this.focus();
      return false;
    });

    addListener(touchables[i], 'click', function(e) {
      if (this.blocktouch) {
        e.preventDefault();
      }
    });
  }

  addListener(document.body, 'click touchend', function(e) {
    var el = e.target;
    while (el) {
      if (has_class(el, 'hover')) {
        return;
      }
      el = el.parentNode;
    }
    remove_class($('.hover'), 'hover');
  });

  var lazy_images = $('.header [data-src]');
  for (var i=0; i<lazy_images.length; i++) {
    var ds = lazy_images[i].getAttribute('data-src'),
        dss = lazy_images[i].getAttribute('data-srcset'),
        dh = lazy_images[i].getAttribute('data-xlink:href');
    if (ds) lazy_images[i].setAttribute('src', ds);
    if (dss) lazy_images[i].setAttribute('srcset', dss);
    if (dh) lazy_images[i].setAttribute('xlink:href', dh);
  }
  
  var nt_links = $('a[href*="new_tab"]');
  for (var i=0; i<nt_links.length; i++) {
    nt_links[i].setAttribute('target', '_blank');
  }

})();
